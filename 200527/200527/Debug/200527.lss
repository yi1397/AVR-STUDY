
200527.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000002ca  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a36  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000880  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000348  00000000  00000000  000016e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000035f  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	f2 d0       	rcall	.+484    	; 0x298 <main>
  b4:	08 c1       	rjmp	.+528    	; 0x2c6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <buff_FND>:
}

unsigned char buff_FND(unsigned char num)
{	
	unsigned char buff = 0x00;
	if(9<num) return buff;
  b8:	8a 30       	cpi	r24, 0x0A	; 10
  ba:	90 f5       	brcc	.+100    	; 0x120 <buff_FND+0x68>
	buff |= number_FND[num][0]<<0;
  bc:	e8 2f       	mov	r30, r24
  be:	f0 e0       	ldi	r31, 0x00	; 0
	buff |= number_FND[num][1]<<1;
  c0:	ee 0f       	add	r30, r30
  c2:	ff 1f       	adc	r31, r31
  c4:	ee 0f       	add	r30, r30
  c6:	ff 1f       	adc	r31, r31
  c8:	ee 0f       	add	r30, r30
  ca:	ff 1f       	adc	r31, r31
  cc:	e0 50       	subi	r30, 0x00	; 0
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
	buff |= number_FND[num][2]<<2;
	buff |= number_FND[num][3]<<3;
	buff |= number_FND[num][4]<<4;
	buff |= number_FND[num][5]<<5;
	buff |= number_FND[num][6]<<6;
	buff |= number_FND[num][7]<<7;
  d0:	81 81       	ldd	r24, Z+1	; 0x01
  d2:	38 2f       	mov	r19, r24
  d4:	33 0f       	add	r19, r19
  d6:	82 81       	ldd	r24, Z+2	; 0x02
  d8:	88 0f       	add	r24, r24
  da:	88 0f       	add	r24, r24
  dc:	83 2b       	or	r24, r19
  de:	30 81       	ld	r19, Z
  e0:	98 2f       	mov	r25, r24
  e2:	93 2b       	or	r25, r19
  e4:	83 81       	ldd	r24, Z+3	; 0x03
  e6:	88 0f       	add	r24, r24
  e8:	88 0f       	add	r24, r24
  ea:	88 0f       	add	r24, r24
  ec:	89 2b       	or	r24, r25
  ee:	94 81       	ldd	r25, Z+4	; 0x04
  f0:	40 e1       	ldi	r20, 0x10	; 16
  f2:	94 9f       	mul	r25, r20
  f4:	90 01       	movw	r18, r0
  f6:	11 24       	eor	r1, r1
  f8:	82 2b       	or	r24, r18
  fa:	95 81       	ldd	r25, Z+5	; 0x05
  fc:	20 e2       	ldi	r18, 0x20	; 32
  fe:	92 9f       	mul	r25, r18
 100:	b0 01       	movw	r22, r0
 102:	11 24       	eor	r1, r1
 104:	86 2b       	or	r24, r22
 106:	96 81       	ldd	r25, Z+6	; 0x06
 108:	20 e4       	ldi	r18, 0x40	; 64
 10a:	92 9f       	mul	r25, r18
 10c:	a0 01       	movw	r20, r0
 10e:	11 24       	eor	r1, r1
 110:	84 2b       	or	r24, r20
 112:	97 81       	ldd	r25, Z+7	; 0x07
 114:	40 e8       	ldi	r20, 0x80	; 128
 116:	94 9f       	mul	r25, r20
 118:	90 01       	movw	r18, r0
 11a:	11 24       	eor	r1, r1
 11c:	82 2b       	or	r24, r18
	
	return buff;
 11e:	08 95       	ret
}

unsigned char buff_FND(unsigned char num)
{	
	unsigned char buff = 0x00;
	if(9<num) return buff;
 120:	80 e0       	ldi	r24, 0x00	; 0
	buff |= number_FND[num][5]<<5;
	buff |= number_FND[num][6]<<6;
	buff |= number_FND[num][7]<<7;
	
	return buff;
}
 122:	08 95       	ret

00000124 <print_FND>:

void print_FND(unsigned short num){
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ec 01       	movw	r28, r24
	unsigned char buff;
	buff = buff_FND(num%10);
 132:	9c 01       	movw	r18, r24
 134:	ad ec       	ldi	r26, 0xCD	; 205
 136:	bc ec       	ldi	r27, 0xCC	; 204
 138:	b7 d0       	rcall	.+366    	; 0x2a8 <__umulhisi3>
 13a:	7c 01       	movw	r14, r24
 13c:	f6 94       	lsr	r15
 13e:	e7 94       	ror	r14
 140:	f6 94       	lsr	r15
 142:	e7 94       	ror	r14
 144:	f6 94       	lsr	r15
 146:	e7 94       	ror	r14
 148:	97 01       	movw	r18, r14
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	c7 01       	movw	r24, r14
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	82 0f       	add	r24, r18
 15e:	93 1f       	adc	r25, r19
 160:	2c 2f       	mov	r18, r28
 162:	28 1b       	sub	r18, r24
 164:	82 2f       	mov	r24, r18
 166:	a8 df       	rcall	.-176    	; 0xb8 <buff_FND>
	num/=10;
	PORTA = 0x08;
 168:	98 e0       	ldi	r25, 0x08	; 8
 16a:	9b bb       	out	0x1b, r25	; 27
	PORTF = buff;
 16c:	02 e6       	ldi	r16, 0x62	; 98
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	f8 01       	movw	r30, r16
 172:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f e9       	ldi	r24, 0x9F	; 159
 176:	9f e0       	ldi	r25, 0x0F	; 15
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <print_FND+0x54>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <print_FND+0x5a>
 17e:	00 00       	nop
	_delay_ms(1);
	buff = buff_FND(num%10);
 180:	97 01       	movw	r18, r14
 182:	ad ec       	ldi	r26, 0xCD	; 205
 184:	bc ec       	ldi	r27, 0xCC	; 204
 186:	90 d0       	rcall	.+288    	; 0x2a8 <__umulhisi3>
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	9c 01       	movw	r18, r24
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	82 0f       	add	r24, r18
 1a8:	93 1f       	adc	r25, r19
 1aa:	ee 2d       	mov	r30, r14
 1ac:	e8 1b       	sub	r30, r24
 1ae:	8e 2f       	mov	r24, r30
 1b0:	83 df       	rcall	.-250    	; 0xb8 <buff_FND>
	num/=10;
	PORTA = 0x04;
 1b2:	94 e0       	ldi	r25, 0x04	; 4
 1b4:	9b bb       	out	0x1b, r25	; 27
	PORTF = buff;
 1b6:	f8 01       	movw	r30, r16
 1b8:	80 83       	st	Z, r24
 1ba:	8f e9       	ldi	r24, 0x9F	; 159
 1bc:	9f e0       	ldi	r25, 0x0F	; 15
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <print_FND+0x9a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <print_FND+0xa0>
 1c4:	00 00       	nop
	_delay_ms(1);
	buff = buff_FND(num%10);
 1c6:	9e 01       	movw	r18, r28
 1c8:	36 95       	lsr	r19
 1ca:	27 95       	ror	r18
 1cc:	36 95       	lsr	r19
 1ce:	27 95       	ror	r18
 1d0:	ab e7       	ldi	r26, 0x7B	; 123
 1d2:	b4 e1       	ldi	r27, 0x14	; 20
 1d4:	69 d0       	rcall	.+210    	; 0x2a8 <__umulhisi3>
 1d6:	ac 01       	movw	r20, r24
 1d8:	56 95       	lsr	r21
 1da:	47 95       	ror	r20
 1dc:	9a 01       	movw	r18, r20
 1de:	ad ec       	ldi	r26, 0xCD	; 205
 1e0:	bc ec       	ldi	r27, 0xCC	; 204
 1e2:	62 d0       	rcall	.+196    	; 0x2a8 <__umulhisi3>
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	96 95       	lsr	r25
 1ee:	87 95       	ror	r24
 1f0:	9c 01       	movw	r18, r24
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	82 0f       	add	r24, r18
 204:	93 1f       	adc	r25, r19
 206:	e4 2f       	mov	r30, r20
 208:	e8 1b       	sub	r30, r24
 20a:	8e 2f       	mov	r24, r30
 20c:	55 df       	rcall	.-342    	; 0xb8 <buff_FND>
	num/=10;
	PORTA = 0x02;
 20e:	92 e0       	ldi	r25, 0x02	; 2
 210:	9b bb       	out	0x1b, r25	; 27
	PORTF = buff;
 212:	f8 01       	movw	r30, r16
 214:	80 83       	st	Z, r24
 216:	8f e9       	ldi	r24, 0x9F	; 159
 218:	9f e0       	ldi	r25, 0x0F	; 15
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <print_FND+0xf6>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <print_FND+0xfc>
 220:	00 00       	nop
	_delay_ms(1);
	buff = buff_FND(num%10);
 222:	9e 01       	movw	r18, r28
 224:	36 95       	lsr	r19
 226:	27 95       	ror	r18
 228:	36 95       	lsr	r19
 22a:	27 95       	ror	r18
 22c:	36 95       	lsr	r19
 22e:	27 95       	ror	r18
 230:	a5 ec       	ldi	r26, 0xC5	; 197
 232:	b0 e2       	ldi	r27, 0x20	; 32
 234:	39 d0       	rcall	.+114    	; 0x2a8 <__umulhisi3>
 236:	ac 01       	movw	r20, r24
 238:	52 95       	swap	r21
 23a:	42 95       	swap	r20
 23c:	4f 70       	andi	r20, 0x0F	; 15
 23e:	45 27       	eor	r20, r21
 240:	5f 70       	andi	r21, 0x0F	; 15
 242:	45 27       	eor	r20, r21
 244:	9a 01       	movw	r18, r20
 246:	ad ec       	ldi	r26, 0xCD	; 205
 248:	bc ec       	ldi	r27, 0xCC	; 204
 24a:	2e d0       	rcall	.+92     	; 0x2a8 <__umulhisi3>
 24c:	96 95       	lsr	r25
 24e:	87 95       	ror	r24
 250:	96 95       	lsr	r25
 252:	87 95       	ror	r24
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	9c 01       	movw	r18, r24
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	82 0f       	add	r24, r18
 26c:	93 1f       	adc	r25, r19
 26e:	e4 2f       	mov	r30, r20
 270:	e8 1b       	sub	r30, r24
 272:	8e 2f       	mov	r24, r30
 274:	21 df       	rcall	.-446    	; 0xb8 <buff_FND>
	num/=10;
	PORTA = 0x01;
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	9b bb       	out	0x1b, r25	; 27
	PORTF = buff;
 27a:	f8 01       	movw	r30, r16
 27c:	80 83       	st	Z, r24
 27e:	8f e9       	ldi	r24, 0x9F	; 159
 280:	9f e0       	ldi	r25, 0x0F	; 15
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <print_FND+0x15e>
 286:	00 c0       	rjmp	.+0      	; 0x288 <print_FND+0x164>
 288:	00 00       	nop
	_delay_ms(1);
	return;
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	08 95       	ret

00000298 <main>:

int main(void)
{
    /* Replace with your application code */
	unsigned short cnt = (unsigned short)919;
	DDRA = 0xFF; //FND 자릿수 제어용
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	8a bb       	out	0x1a, r24	; 26
	DDRF = 0xFF;
 29c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
    while (1) 
    {
		print_FND(cnt);
 2a0:	87 e9       	ldi	r24, 0x97	; 151
 2a2:	93 e0       	ldi	r25, 0x03	; 3
 2a4:	3f df       	rcall	.-386    	; 0x124 <print_FND>
 2a6:	fc cf       	rjmp	.-8      	; 0x2a0 <main+0x8>

000002a8 <__umulhisi3>:
 2a8:	a2 9f       	mul	r26, r18
 2aa:	b0 01       	movw	r22, r0
 2ac:	b3 9f       	mul	r27, r19
 2ae:	c0 01       	movw	r24, r0
 2b0:	a3 9f       	mul	r26, r19
 2b2:	70 0d       	add	r23, r0
 2b4:	81 1d       	adc	r24, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	91 1d       	adc	r25, r1
 2ba:	b2 9f       	mul	r27, r18
 2bc:	70 0d       	add	r23, r0
 2be:	81 1d       	adc	r24, r1
 2c0:	11 24       	eor	r1, r1
 2c2:	91 1d       	adc	r25, r1
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
