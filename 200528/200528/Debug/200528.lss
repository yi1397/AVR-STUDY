
200528.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000988  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000834  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ed  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b2  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	a1 d0       	rcall	.+322    	; 0x1dc <main>
  9a:	b6 c0       	rjmp	.+364    	; 0x208 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <print_FND>:
    {
		print_FND(cnt);
	}
}

void print_FND(unsigned short num){
  9e:	ac 01       	movw	r20, r24
	PORTE = 0x08;
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	83 b9       	out	0x03, r24	; 3
	PORTD = num%10;
  a4:	9a 01       	movw	r18, r20
  a6:	ad ec       	ldi	r26, 0xCD	; 205
  a8:	bc ec       	ldi	r27, 0xCC	; 204
  aa:	9f d0       	rcall	.+318    	; 0x1ea <__umulhisi3>
  ac:	fc 01       	movw	r30, r24
  ae:	f6 95       	lsr	r31
  b0:	e7 95       	ror	r30
  b2:	f6 95       	lsr	r31
  b4:	e7 95       	ror	r30
  b6:	f6 95       	lsr	r31
  b8:	e7 95       	ror	r30
  ba:	9f 01       	movw	r18, r30
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	cf 01       	movw	r24, r30
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	82 0f       	add	r24, r18
  d0:	93 1f       	adc	r25, r19
  d2:	9a 01       	movw	r18, r20
  d4:	28 1b       	sub	r18, r24
  d6:	39 0b       	sbc	r19, r25
  d8:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <print_FND+0x40>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <print_FND+0x46>
  e4:	00 00       	nop
	num/=10;
	_delay_ms(1);
	PORTE = 0x04;
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	83 b9       	out	0x03, r24	; 3
	PORTD = num%10;
  ea:	9f 01       	movw	r18, r30
  ec:	7e d0       	rcall	.+252    	; 0x1ea <__umulhisi3>
  ee:	96 95       	lsr	r25
  f0:	87 95       	ror	r24
  f2:	96 95       	lsr	r25
  f4:	87 95       	ror	r24
  f6:	96 95       	lsr	r25
  f8:	87 95       	ror	r24
  fa:	9c 01       	movw	r18, r24
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	82 0f       	add	r24, r18
 10e:	93 1f       	adc	r25, r19
 110:	e8 1b       	sub	r30, r24
 112:	f9 0b       	sbc	r31, r25
 114:	e2 bb       	out	0x12, r30	; 18
 116:	8f e9       	ldi	r24, 0x9F	; 159
 118:	9f e0       	ldi	r25, 0x0F	; 15
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <print_FND+0x7c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <print_FND+0x82>
 120:	00 00       	nop
	num/=10;
	_delay_ms(1);
	PORTE = 0x02;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	83 b9       	out	0x03, r24	; 3
	PORTD = num%10;
 126:	9a 01       	movw	r18, r20
 128:	36 95       	lsr	r19
 12a:	27 95       	ror	r18
 12c:	36 95       	lsr	r19
 12e:	27 95       	ror	r18
 130:	ab e7       	ldi	r26, 0x7B	; 123
 132:	b4 e1       	ldi	r27, 0x14	; 20
 134:	5a d0       	rcall	.+180    	; 0x1ea <__umulhisi3>
 136:	fc 01       	movw	r30, r24
 138:	f6 95       	lsr	r31
 13a:	e7 95       	ror	r30
 13c:	9f 01       	movw	r18, r30
 13e:	ad ec       	ldi	r26, 0xCD	; 205
 140:	bc ec       	ldi	r27, 0xCC	; 204
 142:	53 d0       	rcall	.+166    	; 0x1ea <__umulhisi3>
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	96 95       	lsr	r25
 14e:	87 95       	ror	r24
 150:	9c 01       	movw	r18, r24
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	82 0f       	add	r24, r18
 164:	93 1f       	adc	r25, r19
 166:	e8 1b       	sub	r30, r24
 168:	f9 0b       	sbc	r31, r25
 16a:	e2 bb       	out	0x12, r30	; 18
 16c:	8f e9       	ldi	r24, 0x9F	; 159
 16e:	9f e0       	ldi	r25, 0x0F	; 15
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <print_FND+0xd2>
 174:	00 c0       	rjmp	.+0      	; 0x176 <print_FND+0xd8>
 176:	00 00       	nop
	num/=10;
	_delay_ms(1);
	PORTE = 0x01;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	83 b9       	out	0x03, r24	; 3
	PORTD = num%10;
 17c:	9a 01       	movw	r18, r20
 17e:	36 95       	lsr	r19
 180:	27 95       	ror	r18
 182:	36 95       	lsr	r19
 184:	27 95       	ror	r18
 186:	36 95       	lsr	r19
 188:	27 95       	ror	r18
 18a:	a5 ec       	ldi	r26, 0xC5	; 197
 18c:	b0 e2       	ldi	r27, 0x20	; 32
 18e:	2d d0       	rcall	.+90     	; 0x1ea <__umulhisi3>
 190:	ac 01       	movw	r20, r24
 192:	52 95       	swap	r21
 194:	42 95       	swap	r20
 196:	4f 70       	andi	r20, 0x0F	; 15
 198:	45 27       	eor	r20, r21
 19a:	5f 70       	andi	r21, 0x0F	; 15
 19c:	45 27       	eor	r20, r21
 19e:	9a 01       	movw	r18, r20
 1a0:	ad ec       	ldi	r26, 0xCD	; 205
 1a2:	bc ec       	ldi	r27, 0xCC	; 204
 1a4:	22 d0       	rcall	.+68     	; 0x1ea <__umulhisi3>
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	9c 01       	movw	r18, r24
 1b4:	22 0f       	add	r18, r18
 1b6:	33 1f       	adc	r19, r19
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	82 0f       	add	r24, r18
 1c6:	93 1f       	adc	r25, r19
 1c8:	48 1b       	sub	r20, r24
 1ca:	59 0b       	sbc	r21, r25
 1cc:	42 bb       	out	0x12, r20	; 18
 1ce:	8f e9       	ldi	r24, 0x9F	; 159
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <print_FND+0x134>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <print_FND+0x13a>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <main>:

int main(void)
{
    /* Replace with your application code */
	unsigned short cnt = (unsigned short)5555;
	DDRD = 0x0F;
 1dc:	8f e0       	ldi	r24, 0x0F	; 15
 1de:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0F;
 1e0:	82 b9       	out	0x02, r24	; 2
	
    while (1) 
    {
		print_FND(cnt);
 1e2:	83 eb       	ldi	r24, 0xB3	; 179
 1e4:	95 e1       	ldi	r25, 0x15	; 21
 1e6:	5b df       	rcall	.-330    	; 0x9e <print_FND>
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <main+0x6>

000001ea <__umulhisi3>:
 1ea:	a2 9f       	mul	r26, r18
 1ec:	b0 01       	movw	r22, r0
 1ee:	b3 9f       	mul	r27, r19
 1f0:	c0 01       	movw	r24, r0
 1f2:	a3 9f       	mul	r26, r19
 1f4:	70 0d       	add	r23, r0
 1f6:	81 1d       	adc	r24, r1
 1f8:	11 24       	eor	r1, r1
 1fa:	91 1d       	adc	r25, r1
 1fc:	b2 9f       	mul	r27, r18
 1fe:	70 0d       	add	r23, r0
 200:	81 1d       	adc	r24, r1
 202:	11 24       	eor	r1, r1
 204:	91 1d       	adc	r25, r1
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
