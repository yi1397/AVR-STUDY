
200605.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002ba  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a2e  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a1  00000000  00000000  00000dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  0000169f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000451  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000247  00000000  00000000  00001e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	e0 d0       	rcall	.+448    	; 0x274 <main>
  b4:	00 c1       	rjmp	.+512    	; 0x2b6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <FND_print>:
		_delay_ms(1000);
    }
}

void FND_print(unsigned int num)
{
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	ec 01       	movw	r28, r24
	unsigned int buff = 0x00;
	
	buff = num%10;
  c2:	9c 01       	movw	r18, r24
  c4:	ad ec       	ldi	r26, 0xCD	; 205
  c6:	bc ec       	ldi	r27, 0xCC	; 204
  c8:	e7 d0       	rcall	.+462    	; 0x298 <__umulhisi3>
  ca:	ac 01       	movw	r20, r24
  cc:	56 95       	lsr	r21
  ce:	47 95       	ror	r20
  d0:	56 95       	lsr	r21
  d2:	47 95       	ror	r20
  d4:	56 95       	lsr	r21
  d6:	47 95       	ror	r20
  d8:	ba 01       	movw	r22, r20
  da:	66 0f       	add	r22, r22
  dc:	77 1f       	adc	r23, r23
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	44 0f       	add	r20, r20
  e4:	55 1f       	adc	r21, r21
  e6:	44 0f       	add	r20, r20
  e8:	55 1f       	adc	r21, r21
  ea:	46 0f       	add	r20, r22
  ec:	57 1f       	adc	r21, r23
  ee:	ce 01       	movw	r24, r28
  f0:	84 1b       	sub	r24, r20
  f2:	95 0b       	sbc	r25, r21
  f4:	ac 01       	movw	r20, r24
	num /= 10;
	buff |= (num % 10) << 4;
	num /= 10;
	buff |= (num % 10) << 8;
  f6:	d0 d0       	rcall	.+416    	; 0x298 <__umulhisi3>
  f8:	8c 01       	movw	r16, r24
  fa:	16 95       	lsr	r17
  fc:	07 95       	ror	r16
  fe:	16 95       	lsr	r17
 100:	07 95       	ror	r16
 102:	16 95       	lsr	r17
 104:	07 95       	ror	r16
 106:	98 01       	movw	r18, r16
 108:	c7 d0       	rcall	.+398    	; 0x298 <__umulhisi3>
 10a:	96 95       	lsr	r25
 10c:	87 95       	ror	r24
 10e:	96 95       	lsr	r25
 110:	87 95       	ror	r24
 112:	96 95       	lsr	r25
 114:	87 95       	ror	r24
 116:	9c 01       	movw	r18, r24
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	82 0f       	add	r24, r18
 12a:	93 1f       	adc	r25, r19
 12c:	08 1b       	sub	r16, r24
 12e:	19 0b       	sbc	r17, r25
 130:	02 95       	swap	r16
 132:	12 95       	swap	r17
 134:	10 7f       	andi	r17, 0xF0	; 240
 136:	10 27       	eor	r17, r16
 138:	00 7f       	andi	r16, 0xF0	; 240
 13a:	10 27       	eor	r17, r16
 13c:	9e 01       	movw	r18, r28
 13e:	36 95       	lsr	r19
 140:	27 95       	ror	r18
 142:	36 95       	lsr	r19
 144:	27 95       	ror	r18
 146:	ab e7       	ldi	r26, 0x7B	; 123
 148:	b4 e1       	ldi	r27, 0x14	; 20
 14a:	a6 d0       	rcall	.+332    	; 0x298 <__umulhisi3>
 14c:	fc 01       	movw	r30, r24
 14e:	f6 95       	lsr	r31
 150:	e7 95       	ror	r30
 152:	9f 01       	movw	r18, r30
 154:	ad ec       	ldi	r26, 0xCD	; 205
 156:	bc ec       	ldi	r27, 0xCC	; 204
 158:	9f d0       	rcall	.+318    	; 0x298 <__umulhisi3>
 15a:	96 95       	lsr	r25
 15c:	87 95       	ror	r24
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	9c 01       	movw	r18, r24
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	82 0f       	add	r24, r18
 17a:	93 1f       	adc	r25, r19
 17c:	bf 01       	movw	r22, r30
 17e:	68 1b       	sub	r22, r24
 180:	79 0b       	sbc	r23, r25
 182:	76 2f       	mov	r23, r22
 184:	66 27       	eor	r22, r22
 186:	60 2b       	or	r22, r16
 188:	71 2b       	or	r23, r17
 18a:	46 2b       	or	r20, r22
 18c:	57 2b       	or	r21, r23
 18e:	9e 01       	movw	r18, r28
	num /= 10;
	buff |= (num % 10) << 12;
 190:	36 95       	lsr	r19
 192:	27 95       	ror	r18
 194:	36 95       	lsr	r19
 196:	27 95       	ror	r18
 198:	36 95       	lsr	r19
 19a:	27 95       	ror	r18
 19c:	a5 ec       	ldi	r26, 0xC5	; 197
 19e:	b0 e2       	ldi	r27, 0x20	; 32
 1a0:	7b d0       	rcall	.+246    	; 0x298 <__umulhisi3>
 1a2:	fc 01       	movw	r30, r24
 1a4:	f2 95       	swap	r31
 1a6:	e2 95       	swap	r30
 1a8:	ef 70       	andi	r30, 0x0F	; 15
 1aa:	ef 27       	eor	r30, r31
 1ac:	ff 70       	andi	r31, 0x0F	; 15
 1ae:	ef 27       	eor	r30, r31
 1b0:	9f 01       	movw	r18, r30
 1b2:	ad ec       	ldi	r26, 0xCD	; 205
 1b4:	bc ec       	ldi	r27, 0xCC	; 204
 1b6:	70 d0       	rcall	.+224    	; 0x298 <__umulhisi3>
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	9c 01       	movw	r18, r24
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	82 0f       	add	r24, r18
 1d8:	93 1f       	adc	r25, r19
 1da:	bf 01       	movw	r22, r30
 1dc:	68 1b       	sub	r22, r24
 1de:	79 0b       	sbc	r23, r25
 1e0:	76 2f       	mov	r23, r22
 1e2:	66 27       	eor	r22, r22
 1e4:	72 95       	swap	r23
 1e6:	70 7f       	andi	r23, 0xF0	; 240
 1e8:	64 2b       	or	r22, r20
 1ea:	75 2b       	or	r23, r21
 1ec:	18 ba       	out	0x18, r1	; 24
	num /= 10;
	
	PORTB = 0x00;
 1ee:	e3 e0       	ldi	r30, 0x03	; 3
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	ab e0       	ldi	r26, 0x0B	; 11
 1f4:	b1 e0       	ldi	r27, 0x01	; 1
 1f6:	33 c0       	rjmp	.+102    	; 0x25e <FND_print+0x1a6>
 1f8:	20 81       	ld	r18, Z
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++){
			if(buff & (output_order_FND[i] >> j)) PORTB = PORTB | pin_DATA;
 1fa:	31 81       	ldd	r19, Z+1	; 0x01
 1fc:	04 2e       	mov	r0, r20
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <FND_print+0x14c>
 200:	36 95       	lsr	r19
 202:	27 95       	ror	r18
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <FND_print+0x148>
 208:	26 23       	and	r18, r22
 20a:	37 23       	and	r19, r23
 20c:	23 2b       	or	r18, r19
 20e:	31 f0       	breq	.+12     	; 0x21c <FND_print+0x164>
 210:	98 b3       	in	r25, 0x18	; 24
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 216:	89 2b       	or	r24, r25
 218:	88 bb       	out	0x18, r24	; 24
 21a:	06 c0       	rjmp	.+12     	; 0x228 <FND_print+0x170>
 21c:	28 b3       	in	r18, 0x18	; 24
			else PORTB = PORTB &~ pin_DATA;
 21e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 222:	90 95       	com	r25
 224:	92 23       	and	r25, r18
 226:	98 bb       	out	0x18, r25	; 24
 228:	28 b3       	in	r18, 0x18	; 24
			PORTB = PORTB | pin_CLOCK;
 22a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <pin_CLOCK>
 22e:	92 2b       	or	r25, r18
 230:	98 bb       	out	0x18, r25	; 24
 232:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <FND_print+0x17e>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <FND_print+0x184>
 23c:	00 00       	nop
 23e:	18 ba       	out	0x18, r1	; 24
			_delay_us(100);
			PORTB = 0x00;
 240:	8f e8       	ldi	r24, 0x8F	; 143
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <FND_print+0x18c>
 248:	00 c0       	rjmp	.+0      	; 0x24a <FND_print+0x192>
 24a:	00 00       	nop
 24c:	4f 5f       	subi	r20, 0xFF	; 255
	
	PORTB = 0x00;
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++){
 24e:	5f 4f       	sbci	r21, 0xFF	; 255
 250:	44 30       	cpi	r20, 0x04	; 4
 252:	51 05       	cpc	r21, r1
 254:	89 f6       	brne	.-94     	; 0x1f8 <FND_print+0x140>
 256:	32 96       	adiw	r30, 0x02	; 2
 258:	ae 17       	cp	r26, r30
	buff |= (num % 10) << 12;
	num /= 10;
	
	PORTB = 0x00;
	
	for(int i = 0; i < 4; i++)
 25a:	bf 07       	cpc	r27, r31
 25c:	19 f0       	breq	.+6      	; 0x264 <FND_print+0x1ac>
 25e:	40 e0       	ldi	r20, 0x00	; 0
		_delay_ms(1000);
    }
}

void FND_print(unsigned int num)
{
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	ca cf       	rjmp	.-108    	; 0x1f8 <FND_print+0x140>
 264:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pin_LATCH>
			PORTB = 0x00;
			_delay_us(100);
		}
	}
	
	PORTB = pin_LATCH;
 268:	88 bb       	out	0x18, r24	; 24
 26a:	df 91       	pop	r29
	
	
	return;
}
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <main>:
 274:	87 e0       	ldi	r24, 0x07	; 7
void FND_print(unsigned int num);

int main(void)
{
    /* Replace with your application code */
    DDRB = 0x07;
 276:	87 bb       	out	0x17, r24	; 23
	
	unsigned int cnt = 0;
	
	PORTB = 0x00;
 278:	18 ba       	out	0x18, r1	; 24
int main(void)
{
    /* Replace with your application code */
    DDRB = 0x07;
	
	unsigned int cnt = 0;
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
	
	PORTB = 0x00;
	
    while (1) 
    {
		cnt++;
 27e:	21 96       	adiw	r28, 0x01	; 1
		FND_print(cnt);
 280:	ce 01       	movw	r24, r28
 282:	1a df       	rcall	.-460    	; 0xb8 <FND_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	83 ed       	ldi	r24, 0xD3	; 211
 288:	90 e3       	ldi	r25, 0x30	; 48
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x16>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x20>
 294:	00 00       	nop
 296:	f3 cf       	rjmp	.-26     	; 0x27e <main+0xa>

00000298 <__umulhisi3>:
 298:	a2 9f       	mul	r26, r18
 29a:	b0 01       	movw	r22, r0
 29c:	b3 9f       	mul	r27, r19
 29e:	c0 01       	movw	r24, r0
 2a0:	a3 9f       	mul	r26, r19
 2a2:	70 0d       	add	r23, r0
 2a4:	81 1d       	adc	r24, r1
 2a6:	11 24       	eor	r1, r1
 2a8:	91 1d       	adc	r25, r1
 2aa:	b2 9f       	mul	r27, r18
 2ac:	70 0d       	add	r23, r0
 2ae:	81 1d       	adc	r24, r1
 2b0:	11 24       	eor	r1, r1
 2b2:	91 1d       	adc	r25, r1
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
