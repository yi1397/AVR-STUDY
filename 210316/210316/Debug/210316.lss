
210316.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b3e  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a9  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ae  00000000  00000000  00001643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000283  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002113  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	53 d0       	rcall	.+166    	; 0x140 <main>
  9a:	5b c0       	rjmp	.+182    	; 0x152 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <GLCD_Command>:
#include <util/delay.h>
#include <avr/io.h>

void GLCD_Command(unsigned char cmd)
{
	PORTC = cmd;
  9e:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~0x01;
  a0:	d8 98       	cbi	0x1b, 0	; 27
	PORTA &= ~0x02;
  a2:	d9 98       	cbi	0x1b, 1	; 27
	PORTA |=  0x04;
  a4:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8a e1       	ldi	r24, 0x1A	; 26
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <GLCD_Command+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <GLCD_Command+0x10>
	_delay_us(5);
	PORTA &= ~0x04;
  ae:	da 98       	cbi	0x1b, 2	; 27
  b0:	8a e1       	ldi	r24, 0x1A	; 26
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <GLCD_Command+0x14>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <GLCD_Command+0x1a>
  b8:	08 95       	ret

000000ba <GLCD_Data>:
	_delay_us(5);
}

void GLCD_Data(unsigned char data)
{
	PORTC = data;
  ba:	85 bb       	out	0x15, r24	; 21
	PORTA |= ~0x01;
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	8e 6f       	ori	r24, 0xFE	; 254
  c0:	8b bb       	out	0x1b, r24	; 27
	PORTA &= ~0x02;
  c2:	d9 98       	cbi	0x1b, 1	; 27
	PORTA |=  0x04;
  c4:	da 9a       	sbi	0x1b, 2	; 27
  c6:	8a e1       	ldi	r24, 0x1A	; 26
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <GLCD_Data+0xe>
  cc:	00 c0       	rjmp	.+0      	; 0xce <GLCD_Data+0x14>
	_delay_us(5);
	PORTA &= ~0x04;
  ce:	da 98       	cbi	0x1b, 2	; 27
  d0:	8a e1       	ldi	r24, 0x1A	; 26
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <GLCD_Data+0x18>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <GLCD_Data+0x1e>
  d8:	08 95       	ret

000000da <GLCD_Init>:
	_delay_us(5);
}

void GLCD_Init()
{
	PORTA |= 0x38;
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	88 63       	ori	r24, 0x38	; 56
  de:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <GLCD_Init+0xc>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <GLCD_Init+0x16>
  f0:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);
  f2:	8e e3       	ldi	r24, 0x3E	; 62
  f4:	d4 df       	rcall	.-88     	; 0x9e <GLCD_Command>
	GLCD_Command(0x40);
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	d2 df       	rcall	.-92     	; 0x9e <GLCD_Command>
	GLCD_Command(0xB8);
  fa:	88 eb       	ldi	r24, 0xB8	; 184
  fc:	d0 df       	rcall	.-96     	; 0x9e <GLCD_Command>
	GLCD_Command(0xC0);
  fe:	80 ec       	ldi	r24, 0xC0	; 192
 100:	ce df       	rcall	.-100    	; 0x9e <GLCD_Command>
	GLCD_Command(0x3F);
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	cc cf       	rjmp	.-104    	; 0x9e <GLCD_Command>
 106:	08 95       	ret

00000108 <GLCD_ClearAll>:
 108:	cf 93       	push	r28
}

void GLCD_ClearAll()
{
 10a:	df 93       	push	r29
	int i,j;
	PORTA |= 0x18;
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	88 61       	ori	r24, 0x18	; 24
 110:	8b bb       	out	0x1b, r24	; 27
	for(i = 0; i < 2; i++)
	{
		GLCD_Command((0xB8) + i);
 112:	88 eb       	ldi	r24, 0xB8	; 184
 114:	c4 df       	rcall	.-120    	; 0x9e <GLCD_Command>
 116:	c0 e4       	ldi	r28, 0x40	; 64
 118:	d0 e0       	ldi	r29, 0x00	; 0
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0x11);
 11a:	81 e1       	ldi	r24, 0x11	; 17
 11c:	ce df       	rcall	.-100    	; 0xba <GLCD_Data>
 11e:	21 97       	sbiw	r28, 0x01	; 1
{
	int i,j;
	PORTA |= 0x18;
	for(i = 0; i < 2; i++)
	{
		GLCD_Command((0xB8) + i);
 120:	e1 f7       	brne	.-8      	; 0x11a <GLCD_ClearAll+0x12>
 122:	89 eb       	ldi	r24, 0xB9	; 185
 124:	bc df       	rcall	.-136    	; 0x9e <GLCD_Command>
 126:	c0 e4       	ldi	r28, 0x40	; 64
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0x11);
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	81 e1       	ldi	r24, 0x11	; 17
 12c:	c6 df       	rcall	.-116    	; 0xba <GLCD_Data>
		}
	}
	GLCD_Command(0x40);
 12e:	21 97       	sbiw	r28, 0x01	; 1
 130:	e1 f7       	brne	.-8      	; 0x12a <GLCD_ClearAll+0x22>
 132:	80 e4       	ldi	r24, 0x40	; 64
	GLCD_Command(0xB8);
 134:	b4 df       	rcall	.-152    	; 0x9e <GLCD_Command>
 136:	88 eb       	ldi	r24, 0xB8	; 184
 138:	b2 df       	rcall	.-156    	; 0x9e <GLCD_Command>
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <main>:

int main(void)
{
    /* Replace with your application code */
    DDRA = 0x07;
 140:	87 e0       	ldi	r24, 0x07	; 7
 142:	8a bb       	out	0x1a, r24	; 26
    DDRC = 0xFF;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	84 bb       	out	0x14, r24	; 20
	GLCD_Init();
 148:	c8 df       	rcall	.-112    	; 0xda <GLCD_Init>
	
	GLCD_Data(0x02);
 14a:	82 e0       	ldi	r24, 0x02	; 2
	GLCD_ClearAll();
 14c:	b6 df       	rcall	.-148    	; 0xba <GLCD_Data>
 14e:	dc df       	rcall	.-72     	; 0x108 <GLCD_ClearAll>
 150:	ff cf       	rjmp	.-2      	; 0x150 <main+0x10>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
