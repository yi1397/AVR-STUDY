
201028.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000196  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e0  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082b  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bf  00000000  00000000  000013d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	23 d0       	rcall	.+70     	; 0x10a <main>
  c4:	66 c0       	rjmp	.+204    	; 0x192 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:

unsigned char cnt = 0;
unsigned char score[SCORE_SIZE] = {17, 43, 66, 77, 97, 114, 127, 137, 255};

ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	PORTB ^= 0x20;
  de:	98 b3       	in	r25, 0x18	; 24
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	89 27       	eor	r24, r25
  e4:	88 bb       	out	0x18, r24	; 24
	TCNT0 = score[cnt];
  e6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	e0 50       	subi	r30, 0x00	; 0
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	80 81       	ld	r24, Z
  f2:	82 bf       	out	0x32, r24	; 50
}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0b be       	out	0x3b, r0	; 59
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <main>:

int main(void)
{
    /* Replace with your application code */
    DDRB=0x20;
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	87 bb       	out	0x17, r24	; 23
	TCCR0 =0x03;
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0x01;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	87 bf       	out	0x37, r24	; 55
	sei();
 116:	78 94       	sei

    while(1){
		if(PINB & 0x01)
		{
			cnt = (cnt + 1) % SCORE_SIZE;
 118:	29 e0       	ldi	r18, 0x09	; 9
 11a:	30 e0       	ldi	r19, 0x00	; 0
	TCCR0 =0x03;
	TIMSK = 0x01;
	sei();

    while(1){
		if(PINB & 0x01)
 11c:	b0 9b       	sbis	0x16, 0	; 22
 11e:	fe cf       	rjmp	.-4      	; 0x11c <main+0x12>
		{
			cnt = (cnt + 1) % SCORE_SIZE;
 120:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	b9 01       	movw	r22, r18
 12a:	0c d0       	rcall	.+24     	; 0x144 <__divmodhi4>
 12c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	4f ef       	ldi	r20, 0xFF	; 255
 132:	85 ea       	ldi	r24, 0xA5	; 165
 134:	9e e0       	ldi	r25, 0x0E	; 14
 136:	41 50       	subi	r20, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x2c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x36>
 140:	00 00       	nop
 142:	ec cf       	rjmp	.-40     	; 0x11c <main+0x12>

00000144 <__divmodhi4>:
 144:	97 fb       	bst	r25, 7
 146:	07 2e       	mov	r0, r23
 148:	16 f4       	brtc	.+4      	; 0x14e <__divmodhi4+0xa>
 14a:	00 94       	com	r0
 14c:	06 d0       	rcall	.+12     	; 0x15a <__divmodhi4_neg1>
 14e:	77 fd       	sbrc	r23, 7
 150:	08 d0       	rcall	.+16     	; 0x162 <__divmodhi4_neg2>
 152:	0b d0       	rcall	.+22     	; 0x16a <__udivmodhi4>
 154:	07 fc       	sbrc	r0, 7
 156:	05 d0       	rcall	.+10     	; 0x162 <__divmodhi4_neg2>
 158:	3e f4       	brtc	.+14     	; 0x168 <__divmodhi4_exit>

0000015a <__divmodhi4_neg1>:
 15a:	90 95       	com	r25
 15c:	81 95       	neg	r24
 15e:	9f 4f       	sbci	r25, 0xFF	; 255
 160:	08 95       	ret

00000162 <__divmodhi4_neg2>:
 162:	70 95       	com	r23
 164:	61 95       	neg	r22
 166:	7f 4f       	sbci	r23, 0xFF	; 255

00000168 <__divmodhi4_exit>:
 168:	08 95       	ret

0000016a <__udivmodhi4>:
 16a:	aa 1b       	sub	r26, r26
 16c:	bb 1b       	sub	r27, r27
 16e:	51 e1       	ldi	r21, 0x11	; 17
 170:	07 c0       	rjmp	.+14     	; 0x180 <__udivmodhi4_ep>

00000172 <__udivmodhi4_loop>:
 172:	aa 1f       	adc	r26, r26
 174:	bb 1f       	adc	r27, r27
 176:	a6 17       	cp	r26, r22
 178:	b7 07       	cpc	r27, r23
 17a:	10 f0       	brcs	.+4      	; 0x180 <__udivmodhi4_ep>
 17c:	a6 1b       	sub	r26, r22
 17e:	b7 0b       	sbc	r27, r23

00000180 <__udivmodhi4_ep>:
 180:	88 1f       	adc	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	5a 95       	dec	r21
 186:	a9 f7       	brne	.-22     	; 0x172 <__udivmodhi4_loop>
 188:	80 95       	com	r24
 18a:	90 95       	com	r25
 18c:	bc 01       	movw	r22, r24
 18e:	cd 01       	movw	r24, r26
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
