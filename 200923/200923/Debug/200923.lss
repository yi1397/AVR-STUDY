
200923.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095a  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000831  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ed  00000000  00000000  00001477  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000406  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008a  00000000  00000000  00001b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	9c c0       	rjmp	.+312    	; 0x1e4 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
unsigned int dist;

int main(void)
{
    /* Replace with your application code */
	DDRD = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	81 bb       	out	0x11, r24	; 17
	DDRE = ((DDRE | (1<<TRIG)) & ~(1<<ECHO));
  b2:	82 b1       	in	r24, 0x02	; 2
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	82 b9       	out	0x02, r24	; 2
    while (1) 
    {
		TCCR1B = 0x03;
  ba:	13 e0       	ldi	r17, 0x03	; 3
		while(!(PINE & (1<<ECHO)));
		TCNT1 = 0x0000;
		while(PINE & (1<<ECHO));
		TCCR1B = 0x00;

		dist = (unsigned int)(SOUND_VELOCITY * (TCNT1 * 2) / 1000);
  bc:	0f 2e       	mov	r0, r31
  be:	f8 ee       	ldi	r31, 0xE8	; 232
  c0:	cf 2e       	mov	r12, r31
  c2:	f3 e0       	ldi	r31, 0x03	; 3
  c4:	df 2e       	mov	r13, r31
  c6:	e1 2c       	mov	r14, r1
  c8:	f1 2c       	mov	r15, r1
  ca:	f0 2d       	mov	r31, r0
		
		PORTD = 0x01 << ((30 < dist) + (70 < dist) + (100 < dist) + (130 < dist) + (200 < dist));
  cc:	c1 e0       	ldi	r28, 0x01	; 1
  ce:	d0 e0       	ldi	r29, 0x00	; 0
    /* Replace with your application code */
	DDRD = 0xFF;
	DDRE = ((DDRE | (1<<TRIG)) & ~(1<<ECHO));
    while (1) 
    {
		TCCR1B = 0x03;
  d0:	1e bd       	out	0x2e, r17	; 46
		PORTE &= ~(1<<TRIG);
  d2:	1e 98       	cbi	0x03, 6	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	25 e3       	ldi	r18, 0x35	; 53
  d6:	2a 95       	dec	r18
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x28>
  da:	00 00       	nop
		_delay_us(10);
		PORTE |= (1<<TRIG);
  dc:	1e 9a       	sbi	0x03, 6	; 3
  de:	85 e3       	ldi	r24, 0x35	; 53
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x32>
  e4:	00 00       	nop
		_delay_us(10);
		PORTE &= ~(1<<TRIG);
  e6:	1e 98       	cbi	0x03, 6	; 3
		while(!(PINE & (1<<ECHO)));
  e8:	0f 9b       	sbis	0x01, 7	; 1
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <main+0x3a>
		TCNT1 = 0x0000;
  ec:	1d bc       	out	0x2d, r1	; 45
  ee:	1c bc       	out	0x2c, r1	; 44
		while(PINE & (1<<ECHO));
  f0:	0f 99       	sbic	0x01, 7	; 1
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <main+0x42>
		TCCR1B = 0x00;
  f4:	1e bc       	out	0x2e, r1	; 46

		dist = (unsigned int)(SOUND_VELOCITY * (TCNT1 * 2) / 1000);
  f6:	2c b5       	in	r18, 0x2c	; 44
  f8:	3d b5       	in	r19, 0x2d	; 45
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	a4 e5       	ldi	r26, 0x54	; 84
 100:	b1 e0       	ldi	r27, 0x01	; 1
 102:	61 d0       	rcall	.+194    	; 0x1c6 <__umulhisi3>
 104:	a7 01       	movw	r20, r14
 106:	96 01       	movw	r18, r12
 108:	3c d0       	rcall	.+120    	; 0x182 <__udivmodsi4>
 10a:	c9 01       	movw	r24, r18
 10c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		PORTD = 0x01 << ((30 < dist) + (70 < dist) + (100 < dist) + (130 < dist) + (200 < dist));
 114:	ae 01       	movw	r20, r28
 116:	8f 31       	cpi	r24, 0x1F	; 31
 118:	91 05       	cpc	r25, r1
 11a:	10 f4       	brcc	.+4      	; 0x120 <main+0x72>
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	9e 01       	movw	r18, r28
 122:	87 34       	cpi	r24, 0x47	; 71
 124:	91 05       	cpc	r25, r1
 126:	10 f4       	brcc	.+4      	; 0x12c <main+0x7e>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	42 0f       	add	r20, r18
 12e:	53 1f       	adc	r21, r19
 130:	9e 01       	movw	r18, r28
 132:	85 36       	cpi	r24, 0x65	; 101
 134:	91 05       	cpc	r25, r1
 136:	10 f4       	brcc	.+4      	; 0x13c <main+0x8e>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	24 0f       	add	r18, r20
 13e:	35 1f       	adc	r19, r21
 140:	ae 01       	movw	r20, r28
 142:	83 38       	cpi	r24, 0x83	; 131
 144:	91 05       	cpc	r25, r1
 146:	10 f4       	brcc	.+4      	; 0x14c <main+0x9e>
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	42 0f       	add	r20, r18
 14e:	53 1f       	adc	r21, r19
 150:	9e 01       	movw	r18, r28
 152:	89 3c       	cpi	r24, 0xC9	; 201
 154:	91 05       	cpc	r25, r1
 156:	10 f4       	brcc	.+4      	; 0x15c <main+0xae>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	24 0f       	add	r18, r20
 15e:	35 1f       	adc	r19, r21
 160:	ce 01       	movw	r24, r28
 162:	02 c0       	rjmp	.+4      	; 0x168 <main+0xba>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	2a 95       	dec	r18
 16a:	e2 f7       	brpl	.-8      	; 0x164 <main+0xb6>
 16c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	9f ef       	ldi	r25, 0xFF	; 255
 170:	21 ee       	ldi	r18, 0xE1	; 225
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	91 50       	subi	r25, 0x01	; 1
 176:	20 40       	sbci	r18, 0x00	; 0
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0xc6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xd0>
 17e:	00 00       	nop
 180:	a7 cf       	rjmp	.-178    	; 0xd0 <main+0x22>

00000182 <__udivmodsi4>:
 182:	a1 e2       	ldi	r26, 0x21	; 33
 184:	1a 2e       	mov	r1, r26
 186:	aa 1b       	sub	r26, r26
 188:	bb 1b       	sub	r27, r27
 18a:	fd 01       	movw	r30, r26
 18c:	0d c0       	rjmp	.+26     	; 0x1a8 <__udivmodsi4_ep>

0000018e <__udivmodsi4_loop>:
 18e:	aa 1f       	adc	r26, r26
 190:	bb 1f       	adc	r27, r27
 192:	ee 1f       	adc	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	a2 17       	cp	r26, r18
 198:	b3 07       	cpc	r27, r19
 19a:	e4 07       	cpc	r30, r20
 19c:	f5 07       	cpc	r31, r21
 19e:	20 f0       	brcs	.+8      	; 0x1a8 <__udivmodsi4_ep>
 1a0:	a2 1b       	sub	r26, r18
 1a2:	b3 0b       	sbc	r27, r19
 1a4:	e4 0b       	sbc	r30, r20
 1a6:	f5 0b       	sbc	r31, r21

000001a8 <__udivmodsi4_ep>:
 1a8:	66 1f       	adc	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	88 1f       	adc	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	1a 94       	dec	r1
 1b2:	69 f7       	brne	.-38     	; 0x18e <__udivmodsi4_loop>
 1b4:	60 95       	com	r22
 1b6:	70 95       	com	r23
 1b8:	80 95       	com	r24
 1ba:	90 95       	com	r25
 1bc:	9b 01       	movw	r18, r22
 1be:	ac 01       	movw	r20, r24
 1c0:	bd 01       	movw	r22, r26
 1c2:	cf 01       	movw	r24, r30
 1c4:	08 95       	ret

000001c6 <__umulhisi3>:
 1c6:	a2 9f       	mul	r26, r18
 1c8:	b0 01       	movw	r22, r0
 1ca:	b3 9f       	mul	r27, r19
 1cc:	c0 01       	movw	r24, r0
 1ce:	a3 9f       	mul	r26, r19
 1d0:	70 0d       	add	r23, r0
 1d2:	81 1d       	adc	r24, r1
 1d4:	11 24       	eor	r1, r1
 1d6:	91 1d       	adc	r25, r1
 1d8:	b2 9f       	mul	r27, r18
 1da:	70 0d       	add	r23, r0
 1dc:	81 1d       	adc	r24, r1
 1de:	11 24       	eor	r1, r1
 1e0:	91 1d       	adc	r25, r1
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
