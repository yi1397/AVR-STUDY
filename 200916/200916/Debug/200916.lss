
200916.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a1  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f0  00000000  00000000  00000b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000323  00000000  00000000  000012f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f5  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	55 c0       	rjmp	.+170    	; 0x156 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
unsigned char motor_speed = 0;

int main(void)
{
    /* Replace with your application code */
	DDRB = 0x10;
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	87 bb       	out	0x17, r24	; 23
    DDRD = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	81 bb       	out	0x11, r24	; 17
	DDRG = 0x00;
  b6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	TCCR0 |= (1<<CS02);
  ba:	83 b7       	in	r24, 0x33	; 51
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	83 bf       	out	0x33, r24	; 51
	
	TCCR0 |= (1<<WGM01);
  c0:	83 b7       	in	r24, 0x33	; 51
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM00);
  c6:	83 b7       	in	r24, 0x33	; 51
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	83 bf       	out	0x33, r24	; 51
	
	TCCR0 |= (1<<COM01);
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	83 bf       	out	0x33, r24	; 51
	
	TCNT0 = 0;
  d2:	12 be       	out	0x32, r1	; 50
	
	PORTD = 0x01;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	82 bb       	out	0x12, r24	; 18
	
    while (1) 
    {
		if(!(PING & 0x01))
  d8:	e3 e6       	ldi	r30, 0x63	; 99
  da:	f0 e0       	ldi	r31, 0x00	; 0
		{
			//stop
			motor_speed = 0;
			PORTD = 0x01;
		}
		OCR0 = motor_speed ? 105 + motor_speed * 30 : 0;
  dc:	2e e1       	ldi	r18, 0x1E	; 30
  de:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if(!(PING & 0x04))
		{
			//stop
			motor_speed = 0;
			PORTD = 0x01;
  e0:	31 e0       	ldi	r19, 0x01	; 1
	
	PORTD = 0x01;
	
    while (1) 
    {
		if(!(PING & 0x01))
  e2:	80 81       	ld	r24, Z
  e4:	80 fd       	sbrc	r24, 0
  e6:	0c c0       	rjmp	.+24     	; 0x100 <main+0x52>
		{
			//up
			if(motor_speed != 5) 
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	85 30       	cpi	r24, 0x05	; 5
  ee:	01 f1       	breq	.+64     	; 0x130 <main+0x82>
			{
				motor_speed++;
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				PORTD = PORTD << 1 | 1;
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	88 0f       	add	r24, r24
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	14 c0       	rjmp	.+40     	; 0x128 <main+0x7a>
			}
		}
		else if(!(PING & 0x02))
 100:	80 81       	ld	r24, Z
 102:	81 fd       	sbrc	r24, 1
 104:	0b c0       	rjmp	.+22     	; 0x11c <main+0x6e>
		{
			//down
			if(motor_speed != 0) 
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10a:	88 23       	and	r24, r24
 10c:	b1 f0       	breq	.+44     	; 0x13a <main+0x8c>
			{
				motor_speed--;
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				PORTD = PORTD >> 1;
 114:	82 b3       	in	r24, 0x12	; 18
 116:	86 95       	lsr	r24
 118:	82 bb       	out	0x12, r24	; 18
 11a:	06 c0       	rjmp	.+12     	; 0x128 <main+0x7a>
			}
		}
		else if(!(PING & 0x04))
 11c:	80 81       	ld	r24, Z
 11e:	82 fd       	sbrc	r24, 2
 120:	03 c0       	rjmp	.+6      	; 0x128 <main+0x7a>
		{
			//stop
			motor_speed = 0;
 122:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD = 0x01;
 126:	32 bb       	out	0x12, r19	; 18
		}
		OCR0 = motor_speed ? 105 + motor_speed * 30 : 0;
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	88 23       	and	r24, r24
 12e:	39 f0       	breq	.+14     	; 0x13e <main+0x90>
 130:	82 9f       	mul	r24, r18
 132:	80 2d       	mov	r24, r0
 134:	11 24       	eor	r1, r1
 136:	87 59       	subi	r24, 0x97	; 151
 138:	03 c0       	rjmp	.+6      	; 0x140 <main+0x92>
 13a:	89 2f       	mov	r24, r25
 13c:	01 c0       	rjmp	.+2      	; 0x140 <main+0x92>
 13e:	89 2f       	mov	r24, r25
 140:	81 bf       	out	0x31, r24	; 49
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	4f ef       	ldi	r20, 0xFF	; 255
 144:	51 ee       	ldi	r21, 0xE1	; 225
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	41 50       	subi	r20, 0x01	; 1
 14a:	50 40       	sbci	r21, 0x00	; 0
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x9a>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xa4>
 152:	00 00       	nop
 154:	c6 cf       	rjmp	.-116    	; 0xe2 <main+0x34>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
