
200624.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000029e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e29  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000914  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ca  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000435  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000657  00000000  00000000  000024ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e9       	ldi	r30, 0x9E	; 158
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	91 d0       	rcall	.+290    	; 0x1d6 <main>
  b4:	f2 c0       	rjmp	.+484    	; 0x29a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <COMMAND>:
void MOVE(int y, int x)
{
	unsigned char data;
	if(y==1) data=0x7F+x;
	else data=0xBF+x;
	COMMAND(data);
  b8:	ef e3       	ldi	r30, 0x3F	; 63
  ba:	ff e1       	ldi	r31, 0x1F	; 31
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <COMMAND+0x4>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <COMMAND+0xa>
  c2:	00 00       	nop
  c4:	98 2f       	mov	r25, r24
  c6:	90 7f       	andi	r25, 0xF0	; 240
  c8:	95 bb       	out	0x15, r25	; 21
  ca:	95 b3       	in	r25, 0x15	; 21
  cc:	9c 7f       	andi	r25, 0xFC	; 252
  ce:	95 bb       	out	0x15, r25	; 21
  d0:	f5 e0       	ldi	r31, 0x05	; 5
  d2:	fa 95       	dec	r31
  d4:	f1 f7       	brne	.-4      	; 0xd2 <COMMAND+0x1a>
  d6:	00 00       	nop
  d8:	aa 9a       	sbi	0x15, 2	; 21
  da:	25 e0       	ldi	r18, 0x05	; 5
  dc:	2a 95       	dec	r18
  de:	f1 f7       	brne	.-4      	; 0xdc <COMMAND+0x24>
  e0:	00 00       	nop
  e2:	aa 98       	cbi	0x15, 2	; 21
  e4:	e0 e1       	ldi	r30, 0x10	; 16
  e6:	8e 9f       	mul	r24, r30
  e8:	c0 01       	movw	r24, r0
  ea:	11 24       	eor	r1, r1
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	8c 7f       	andi	r24, 0xFC	; 252
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	f5 e0       	ldi	r31, 0x05	; 5
  f6:	fa 95       	dec	r31
  f8:	f1 f7       	brne	.-4      	; 0xf6 <COMMAND+0x3e>
  fa:	00 00       	nop
  fc:	aa 9a       	sbi	0x15, 2	; 21
  fe:	25 e0       	ldi	r18, 0x05	; 5
 100:	2a 95       	dec	r18
 102:	f1 f7       	brne	.-4      	; 0x100 <COMMAND+0x48>
 104:	00 00       	nop
 106:	aa 98       	cbi	0x15, 2	; 21
 108:	08 95       	ret

0000010a <DATA>:
 10a:	e7 e7       	ldi	r30, 0x77	; 119
 10c:	ff e0       	ldi	r31, 0x0F	; 15
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <DATA+0x4>
 112:	00 c0       	rjmp	.+0      	; 0x114 <DATA+0xa>
 114:	00 00       	nop
 116:	98 2f       	mov	r25, r24
 118:	90 7f       	andi	r25, 0xF0	; 240
 11a:	95 bb       	out	0x15, r25	; 21
 11c:	a8 9a       	sbi	0x15, 0	; 21
 11e:	a9 98       	cbi	0x15, 1	; 21
 120:	f5 e0       	ldi	r31, 0x05	; 5
 122:	fa 95       	dec	r31
 124:	f1 f7       	brne	.-4      	; 0x122 <DATA+0x18>
 126:	00 00       	nop
 128:	aa 9a       	sbi	0x15, 2	; 21
 12a:	25 e0       	ldi	r18, 0x05	; 5
 12c:	2a 95       	dec	r18
 12e:	f1 f7       	brne	.-4      	; 0x12c <DATA+0x22>
 130:	00 00       	nop
 132:	aa 98       	cbi	0x15, 2	; 21
 134:	e0 e1       	ldi	r30, 0x10	; 16
 136:	8e 9f       	mul	r24, r30
 138:	c0 01       	movw	r24, r0
 13a:	11 24       	eor	r1, r1
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	a8 9a       	sbi	0x15, 0	; 21
 140:	a9 98       	cbi	0x15, 1	; 21
 142:	f5 e0       	ldi	r31, 0x05	; 5
 144:	fa 95       	dec	r31
 146:	f1 f7       	brne	.-4      	; 0x144 <DATA+0x3a>
 148:	00 00       	nop
 14a:	aa 9a       	sbi	0x15, 2	; 21
 14c:	25 e0       	ldi	r18, 0x05	; 5
 14e:	2a 95       	dec	r18
 150:	f1 f7       	brne	.-4      	; 0x14e <DATA+0x44>
 152:	00 00       	nop
 154:	aa 98       	cbi	0x15, 2	; 21
 156:	08 95       	ret

00000158 <LCD_INIT>:
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	86 e7       	ldi	r24, 0x76	; 118
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <LCD_INIT+0x6>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_INIT+0x10>
 168:	00 00       	nop
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	a5 df       	rcall	.-182    	; 0xb8 <COMMAND>
 16e:	20 ed       	ldi	r18, 0xD0	; 208
 170:	2a 95       	dec	r18
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_INIT+0x18>
 174:	8e e0       	ldi	r24, 0x0E	; 14
 176:	a0 df       	rcall	.-192    	; 0xb8 <COMMAND>
 178:	80 ed       	ldi	r24, 0xD0	; 208
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_INIT+0x22>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	9b df       	rcall	.-202    	; 0xb8 <COMMAND>
 182:	87 ee       	ldi	r24, 0xE7	; 231
 184:	97 e1       	ldi	r25, 0x17	; 23
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_INIT+0x2e>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_INIT+0x34>
 18c:	00 00       	nop
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	93 cf       	rjmp	.-218    	; 0xb8 <COMMAND>
 192:	08 95       	ret

00000194 <str_LCD>:
}


void str_LCD(const char* str)
{
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	8c 01       	movw	r16, r24
 1a2:	7c 01       	movw	r14, r24
	for(int i = 0; i<strlen(str); i++)
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <str_LCD+0x20>
	{
		DATA(str[i]);
 1aa:	f7 01       	movw	r30, r14
 1ac:	81 91       	ld	r24, Z+
 1ae:	7f 01       	movw	r14, r30
 1b0:	ac df       	rcall	.-168    	; 0x10a <DATA>
}


void str_LCD(const char* str)
{
	for(int i = 0; i<strlen(str); i++)
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	f8 01       	movw	r30, r16
 1b6:	01 90       	ld	r0, Z+
 1b8:	00 20       	and	r0, r0
 1ba:	e9 f7       	brne	.-6      	; 0x1b6 <str_LCD+0x22>
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	e0 1b       	sub	r30, r16
 1c0:	f1 0b       	sbc	r31, r17
 1c2:	ce 17       	cp	r28, r30
 1c4:	df 07       	cpc	r29, r31
 1c6:	88 f3       	brcs	.-30     	; 0x1aa <str_LCD+0x16>
	{
		DATA(str[i]);
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	08 95       	ret

000001d6 <main>:

int main(void)
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	00 d0       	rcall	.+0      	; 0x1dc <main+0x6>
 1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x8>
 1de:	1f 92       	push	r1
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
    DDRC = 0xFF;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;
 1e8:	11 ba       	out	0x11, r1	; 17
	PORTC = 0x00;
 1ea:	15 ba       	out	0x15, r1	; 21
	LCD_INIT();
 1ec:	b5 df       	rcall	.-150    	; 0x158 <LCD_INIT>
	
	unsigned char x=1;
	
	str_LCD("0000");
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	d0 df       	rcall	.-96     	; 0x194 <str_LCD>
	
	unsigned char num[5] = {0,0,0,0};
 1f4:	fe 01       	movw	r30, r28
 1f6:	31 96       	adiw	r30, 0x01	; 1
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	df 01       	movw	r26, r30
 1fc:	1d 92       	st	X+, r1
 1fe:	8a 95       	dec	r24
 200:	e9 f7       	brne	.-6      	; 0x1fc <main+0x26>
    DDRC = 0xFF;
	DDRD = 0x00;
	PORTC = 0x00;
	LCD_INIT();
	
	unsigned char x=1;
 202:	11 e0       	ldi	r17, 0x01	; 1
	
	unsigned char num[5] = {0,0,0,0};
	
    while (1) 
    {
		if(!(PIND & 0x01))
 204:	80 99       	sbic	0x10, 0	; 16
 206:	04 c0       	rjmp	.+8      	; 0x210 <main+0x3a>
		{
			if(x!=1)
 208:	11 30       	cpi	r17, 0x01	; 1
 20a:	39 f0       	breq	.+14     	; 0x21a <main+0x44>
			{
				x--;
 20c:	11 50       	subi	r17, 0x01	; 1
 20e:	05 c0       	rjmp	.+10     	; 0x21a <main+0x44>
			}
		}
		else if(!(PIND & 0x02))
 210:	81 99       	sbic	0x10, 1	; 16
 212:	03 c0       	rjmp	.+6      	; 0x21a <main+0x44>
		{
			if(x!=4)
 214:	14 30       	cpi	r17, 0x04	; 4
 216:	09 f0       	breq	.+2      	; 0x21a <main+0x44>
			{
				x++;
 218:	1f 5f       	subi	r17, 0xFF	; 255
			}
		}
		if(!(PIND & 0x04))
 21a:	82 99       	sbic	0x10, 2	; 16
 21c:	16 c0       	rjmp	.+44     	; 0x24a <main+0x74>
		{
			if (num[x]!=9)
 21e:	21 2f       	mov	r18, r17
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	e1 e0       	ldi	r30, 0x01	; 1
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ec 0f       	add	r30, r28
 228:	fd 1f       	adc	r31, r29
 22a:	e2 0f       	add	r30, r18
 22c:	f3 1f       	adc	r31, r19
 22e:	80 81       	ld	r24, Z
 230:	89 30       	cpi	r24, 0x09	; 9
 232:	81 f1       	breq	.+96     	; 0x294 <main+0xbe>
			{
				
				DATA('0'+(++num[x]));
 234:	e1 e0       	ldi	r30, 0x01	; 1
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	e2 0f       	add	r30, r18
 23e:	f3 1f       	adc	r31, r19
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	98 0f       	add	r25, r24
 244:	90 83       	st	Z, r25
 246:	8f 5c       	subi	r24, 0xCF	; 207
 248:	60 df       	rcall	.-320    	; 0x10a <DATA>
			}
		}
		if(!(PIND & 0x08))
 24a:	83 99       	sbic	0x10, 3	; 16
 24c:	16 c0       	rjmp	.+44     	; 0x27a <main+0xa4>
		{
			if (num[x]!=0)
 24e:	21 2f       	mov	r18, r17
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	e1 e0       	ldi	r30, 0x01	; 1
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ec 0f       	add	r30, r28
 258:	fd 1f       	adc	r31, r29
 25a:	e2 0f       	add	r30, r18
 25c:	f3 1f       	adc	r31, r19
 25e:	80 81       	ld	r24, Z
 260:	88 23       	and	r24, r24
 262:	59 f0       	breq	.+22     	; 0x27a <main+0xa4>
			{
				
				DATA('0'+(--num[x]));
 264:	e1 e0       	ldi	r30, 0x01	; 1
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ec 0f       	add	r30, r28
 26a:	fd 1f       	adc	r31, r29
 26c:	e2 0f       	add	r30, r18
 26e:	f3 1f       	adc	r31, r19
 270:	9f ef       	ldi	r25, 0xFF	; 255
 272:	98 0f       	add	r25, r24
 274:	90 83       	st	Z, r25
 276:	81 5d       	subi	r24, 0xD1	; 209
void MOVE(int y, int x)
{
	unsigned char data;
	if(y==1) data=0x7F+x;
	else data=0xBF+x;
	COMMAND(data);
 278:	48 df       	rcall	.-368    	; 0x10a <DATA>
 27a:	8f e7       	ldi	r24, 0x7F	; 127
 27c:	81 0f       	add	r24, r17
 27e:	1c df       	rcall	.-456    	; 0xb8 <COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	bf ef       	ldi	r27, 0xFF	; 255
 282:	23 ec       	ldi	r18, 0xC3	; 195
 284:	89 e0       	ldi	r24, 0x09	; 9
 286:	b1 50       	subi	r27, 0x01	; 1
 288:	20 40       	sbci	r18, 0x00	; 0
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0xb0>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0xba>
 290:	00 00       	nop
 292:	b8 cf       	rjmp	.-144    	; 0x204 <main+0x2e>
			{
				
				DATA('0'+(++num[x]));
			}
		}
		if(!(PIND & 0x08))
 294:	83 9b       	sbis	0x10, 3	; 16
 296:	e6 cf       	rjmp	.-52     	; 0x264 <main+0x8e>
 298:	f0 cf       	rjmp	.-32     	; 0x27a <main+0xa4>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
